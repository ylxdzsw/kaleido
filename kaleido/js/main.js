// Generated by IcedCoffeeScript 108.0.8
(function() {
  var COLORS, Monitors, addMonitor, alertMessage, compact, generateRamdomStyle, getRandomColor, kaleido, loadAllMonitors, renderAllMonitors, renderMonitor, saveAllMonitors, syncAllMonitors, syncMonitor, updateAllRenderedMonitors, updateRenderedMonitor;

  window.kaleido = kaleido = {};

  Monitors = [];

  kaleido.init = function() {
    $("#add-monitor-submit").click(function(e) {
      return addMonitor({
        name: $('#add-monitor-form-name').val(),
        url: $('#add-monitor-form-url').val(),
        selector: $('#add-monitor-form-selector').val()
      });
    });
    return loadAllMonitors(function() {
      renderAllMonitors();
      return syncAllMonitors();
    });
  };

  kaleido.activate = function() {
    return Monitors.forEach(syncMonitor);
  };

  kaleido.save = function(cb) {
    return saveAllMonitors(cb);
  };

  addMonitor = function(monitor) {
    Monitors.push(monitor);
    renderMonitor(monitor);
    syncMonitor(monitor);
    saveAllMonitors();
    return alertMessage("Monitor Added Successfully!", 'success');
  };

  renderMonitor = function(monitor) {
    var HTMLstr, style, _ref, _ref1;
    if (monitor.rendered) {
      return;
    } else {
      monitor.rendered = true;
    }
    style = (_ref = monitor.style) != null ? _ref : generateRamdomStyle();
    HTMLstr = "<div id=\"monitor-" + monitor.name + "\">" + ((_ref1 = monitor.lastSync) != null ? _ref1.result : void 0) + "</div>";
    return $(HTMLstr).css(style).appendTo($("#monitor-container"));
  };

  renderAllMonitors = function() {
    return Monitors.forEach(renderMonitor);
  };

  updateRenderedMonitor = function(monitor) {
    var _ref;
    return $("#monitor-" + monitor.name).text((_ref = monitor.lastSync) != null ? _ref.result : void 0);
  };

  updateAllRenderedMonitors = function() {
    return Monitors.forEach(updateRenderedMonitor);
  };

  syncMonitor = function(monitor, cb) {
    if (cb == null) {
      cb = _.noop;
    }
    return $.get(monitor.url, function(data, status, xhr) {
      var $data;
      data = $(monitor.selector, data);
      data = monitor.process ? ($data = data, eval(monitor.process)) : data.text();
      monitor.lastSync = {
        time: _.now(),
        result: data
      };
      updateRenderedMonitor(monitor);
      return cb();
    });
  };

  syncAllMonitors = function() {
    var i, _i, _len;
    for (_i = 0, _len = Monitors.length; _i < _len; _i++) {
      i = Monitors[_i];
      syncMonitor(i);
    }
    return null;
  };

  saveAllMonitors = function(cb) {
    var MonitorsToSave, cloneMonitor;
    if (cb == null) {
      cb = _.noop;
    }
    cloneMonitor = function(monitor) {
      var _ref, _ref1;
      return {
        name: monitor.name,
        url: monitor.url,
        selector: monitor.selector,
        lastSync: (_ref = monitor.lastSync) != null ? _ref : null,
        style: (_ref1 = monitor.style) != null ? _ref1 : null
      };
    };
    MonitorsToSave = Monitors.map(cloneMonitor).map(compact);
    return Windows.Storage.ApplicationData.current.roamingFolder.createFileAsync("Monitors.json", Windows.Storage.CreationCollisionOption.replaceExisting).then(function(file) {
      return Windows.Storage.FileIO.writeTextAsync(file, JSON.stringify(MonitorsToSave));
    }).done(cb);
  };

  loadAllMonitors = function(cb) {
    var parseData;
    if (cb == null) {
      cb = _.noop;
    }
    parseData = function(data) {
      var e, m;
      try {
        m = JSON.parse(data);
        if (_.isArray(m)) {
          Monitors = m;
        }
      } catch (_error) {
        e = _error;
        alertMessage("Load Data Failed", 'error');
      }
      return cb();
    };
    return Windows.Storage.ApplicationData.current.roamingFolder.getFileAsync("Monitors.json").then(function(file) {
      return Windows.Storage.FileIO.readTextAsync(file);
    }).done(parseData, cb);
  };

  alertMessage = function(msg, type) {
    var HTMLstr;
    if (type == null) {
      type = "info";
    }
    if (type !== 'success' && type !== 'info' && type !== 'warning' && type !== 'danger') {
      throw new SyntaxError("unexpected alert message type");
    }
    HTMLstr = "<div class=\"alert alert-dismissible alert-" + type + " fade in out\" role=\"alert\">\n    <button type=\"button\" class=\"close\" data-dismiss=\"alert\"><span>&times;</span></button>\n    <span id=\"alerter-message\">" + msg + "</span>\n</div>";
    return $(HTMLstr).appendTo($('#alerter'));
  };

  COLORS = ["AliceBlue", "AntiqueWhite", "Aqua", "Aquamarine", "Azure", "Beige", "Bisque", "Black", "BlanchedAlmond", "Blue", "BlueViolet", "Brown", "BurlyWood", "CadetBlue", "Chartreuse", "Chocolate", "Coral", "CornflowerBlue", "Cornsilk", "Crimson", "Cyan", "DarkBlue", "DarkCyan", "DarkGoldenRod", "DarkGray", "DarkGreen", "DarkKhaki", "DarkMagenta", "DarkOliveGreen", "DarkOrange", "DarkOrchid", "DarkRed", "DarkSalmon", "DarkSeaGreen", "DarkSlateBlue", "DarkSlateGray", "DarkTurquoise", "DarkViolet", "DeepPink", "DeepSkyBlue", "DimGray", "DodgerBlue", "FireBrick", "FloralWhite", "ForestGreen", "Fuchsia", "Gainsboro", "GhostWhite", "Gold", "GoldenRod", "Gray", "Green", "GreenYellow", "HoneyDew", "HotPink", "IndianRed ", "Indigo  ", "Ivory", "Khaki", "Lavender", "LavenderBlush", "LawnGreen", "LemonChiffon", "LightBlue", "LightCoral", "LightCyan", "LightGoldenRodYellow", "LightGray", "LightGreen", "LightPink", "LightSalmon", "LightSeaGreen", "LightSkyBlue", "LightSlateGray", "LightSteelBlue", "LightYellow", "Lime", "LimeGreen", "Linen", "Magenta", "Maroon", "MediumAquaMarine", "MediumBlue", "MediumOrchid", "MediumPurple", "MediumSeaGreen", "MediumSlateBlue", "MediumSpringGreen", "MediumTurquoise", "MediumVioletRed", "MidnightBlue", "MintCream", "MistyRose", "Moccasin", "NavajoWhite", "Navy", "OldLace", "Olive", "OliveDrab", "Orange", "OrangeRed", "Orchid", "PaleGoldenRod", "PaleGreen", "PaleTurquoise", "PaleVioletRed", "PapayaWhip", "PeachPuff", "Peru", "Pink", "Plum", "PowderBlue", "Purple", "RebeccaPurple", "Red", "RosyBrown", "RoyalBlue", "SaddleBrown", "Salmon", "SandyBrown", "SeaGreen", "SeaShell", "Sienna", "Silver", "SkyBlue", "SlateBlue", "SlateGray", "Snow", "SpringGreen", "SteelBlue", "Tan", "Teal", "Thistle", "Tomato", "Turquoise", "Violet", "Wheat", "White", "WhiteSmoke", "Yellow", "YellowGreen"];

  getRandomColor = function() {
    return _.sample(COLORS);
  };

  generateRamdomStyle = function() {
    return {
      backgroundColor: getRandomColor(),
      color: getRandomColor()
    };
  };

  compact = function(x) {
    var k, v;
    if (_.isArray(x)) {
      return _.compact(x);
    } else {
      for (k in x) {
        v = x[k];
        if (v == null) {
          delete x[k];
        }
      }
      return x;
    }
  };

}).call(this);
